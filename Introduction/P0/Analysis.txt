Task0 analysis:
O(1) time complexity, really it makes 3 operations (high level) for the first
printout and 4 operations (high level) for the second printout. O(3) and O(4),
but the whole thing is O(7) plus the print statements. So O(7) + O(2) = O(9) -
however, this is easily reduced down to O(1) because of constants.

Task1 analysis:
Absolute worst case timing is O(n^2), but on average this will be O(n) time
complexity, because the for loop is O(n) for both the calls and the texts.
Python set add operation is on average O(1), so the total is
O(n) + O(n) = O(2n) = O(n) - this assumes texts and calls always same number,
otherwise could be seen as O(n + m) where m is the number of texts and n the
number of calls.

Task2 analysis:
O(n) time complexity, because the for loop. Specifically, we make up to 2 calls
 within the loop and a two max calls on the return, and the print call itself.
 This leads to O(2n) + O(2) + O(1) = O(2n + 3) = O(n)

Task3 analysis:
PartA: O(nlogn) time complexity, O(n) for the loop, sorted set costs an
additional O(nlogn), and call within the loop for appending a value. This leads
 to O(n) + O(nlogn) + O(1) = O(nlogn). There is also a loop for the prints O(n)
Part B: O(n) time complexity, O(n) for the loop, and O(1) for the print call.
 This leads to O(n) + O(1) = O(n) Any other constant calls are insignificant,
 such as length call or division call.

Task4 analysis:
O(nlogn) time complexity, we gather the list of calls, list of received calls,
list of sending texts, and list of received texts. Each of these is linear, but
 we sort the result which is in O(nlogn) time. Using set union we can combine
 the results of numbers we filter out of our callers list, then subtract the
 callers list from the union result of our filter, thereby leaving us potential
  telemarketer numbers.