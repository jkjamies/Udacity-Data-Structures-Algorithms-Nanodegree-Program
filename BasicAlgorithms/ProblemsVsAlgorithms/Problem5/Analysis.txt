Problem6:



Design Choice:
We can solve this with a single traversal by initializing a min and max element
 to the first element in the list. Then we can iterate through the list and
 compare each element to the min and max. If the element is less than the min,
 we can update the min. If the element is greater than the max, we can update
 the max. At the end of the traversal, we will have the min and max elements
 which we can return in a tuple. Edge-case: if the list is empty, we can return
  None.





Building a Trie in Python:


Time Complexity:

TrieNode:
insert:
O(1) - basic assignment and dictionary operations, limited by size of alphabet

Trie:
insert:
O(n) - where n is the length of the word to insert due to iterating over each
character in the word

find:
O(n) - where n is the length of the prefix, worst case iterating over every
character in the prefix


Space Complexity:

TrieNode:
insert:
O(1) - single character insertion

Trie:
insert:
O(n) - where n is the length of the word to insert due to needing n new
TrieNode instances, each TrieNode storing a character in the dictionary

find:
O(1) - N/A





Finding Suffixes:


Time Complexity:
insert:
O(1) - adds a single character as a child node

suffix:
O(n) - where n is the total number of characters in all suffixes below the
current node


Space Complexity:

insert:
O(1) - basic assignment and dictionary operations

suffix:
O(m) - where m is the total number of nodes in the subtree rooted at the
current node





Testing It All Out:


Time Complexity:
f(prefix):
O(l + n) - find takes O(l) time where l is the length of the prefix
and n is the number of prefixes found to be printed


Space Complexity:
f(prefix):
O(l) - length of prefix to hold in memory





Added Test Cases:
Empty list
List with a single element
List with large numbers
List with negative numbers
